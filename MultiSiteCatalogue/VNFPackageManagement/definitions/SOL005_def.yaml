 definitions: 
   Identifier:
     description: >
       An identifier with the intention of being globally unique.
     type: string
          
   Link:
     description: >
       This type represents a link to a resource.
     type: object
     required:
       - href
     properties:
       href:
         description: >
           URI of the referenced resource.
         type: string
         format: url
         
   DateTime:
     description: >
       Date-time stamp. 
       Representation: String formatted according to IETF RFC 3339.
     type: string
     format: "date-time"
     
   String:
     description: >
       This type represents stack of string values
     type: string     

   Object:
     description: >
       This type represents stack of object values
     type: object
     
   KeyValuePairs:
     description: >
       This type represents a list of key-value pairs. The order of the pairs in the list is not significant.
       In JSON, a set of key- value pairs is represented as an object. It shall comply with the provisions 
       defined in clause 4 of IETF RFC 7159. 
     type: object
          
   ProblemDetails:
     description: >
       The definition of the general "ProblemDetails" data structure from
       IETF RFC 7807 [19] is reproduced inthis structure. Compared to the
       general framework defined in IETF RFC 7807 [19], the "status" and
       "detail" attributes are mandated to be included by the present document,
       to ensure that the response contains additional textual information about
       an error. IETF RFC 7807 [19] foresees extensibility of the
       "ProblemDetails" type. It is possible that particular APIs in the present
       document, or particular implementations, define extensions to define
       additional attributes that provide more information about the error.
       The description column only provides some explanation of the meaning to
       Facilitate understanding of the design. For a full description, see
       IETF RFC 7807 [19].
     type: object
     required:
       - status
       - detail
     properties:
       type:
         description: >
           A URI reference according to IETF RFC 3986 [5] that identifies the
           problem type. It is encouraged that the URI provides human-readable
           documentation for the problem (e.g. using HTML) when dereferenced.
           When this member is not present, its value is assumed to be
           "about:blank".
         type: string
         format: URI
       title:
         description: >
           A short, human-readable summary of the problem type. It should not
           change from occurrence to occurrence of the problem, except for
           purposes of localization. If type is given and other than
           "about:blank", this attribute shall also be provided.
           A short, human-readable summary of the problem
           type.  It SHOULD NOT change from occurrence to occurrence of the
           problem, except for purposes of localization (e.g., using
           proactive content negotiation; see [RFC7231], Section 3.4).
         type: string
       status:
         description: >
           The HTTP status code for this occurrence of the problem.
           The HTTP status code ([RFC7231], Section 6) generated by the origin
           server for this occurrence of the problem.
         type: integer
       detail:
         description: >
           A human-readable explanation specific to this occurrence of the
           problem.
         type: string
       instance:
         description: >
           A URI reference that identifies the specific occurrence of the
           problem. It may yield further information if dereferenced.
         type: string
         format: URI
   IdentifierInVnfd:
     description: >
       Identifier of the software image.
     type: string
   Uri:
     description: >
       String formatted according to IETF RFC 3986.
     type: string     
   Version:
     description: >
       Software version of the VNF. This is
       changed when there is any change to the
       software included in the VNF package.
       This information is copied from the VNFD.
       It shall be present after the VNF package
       content has been on-boarded and absent otherwise.
     type: string
   Checksum:
     description: >
       This type represents the checksum of a VNF package or an artifact file.  
     required:
       - algorithm
       - hash
     type: object
     properties:
       algorithm:
         description: >
           Name of the algorithm used to generate the checksum,
           as defined in ETSI GS NFV-SOL 004 [5]. For example, SHA-256, SHA-512.
         type: string
       hash:
         description: >
           The hexadecimal value of the checksum.
         type: string 
         
   SubscriptionAuthentication:
     type: object
     required: 
       - authType
     properties: 
       authType:
         description: >
           Defines the types of Authentication / Authorization which the API
           consumer is willing to accept when receiving a notification.
           Permitted values:
           * BASIC: In every HTTP request to the notification endpoint, use
             HTTP Basic authentication with the client credentials. 
           * OAUTH2_CLIENT_CREDENTIALS: In every HTTP request to the
             notification endpoint, use an OAuth 2.0 Bearer token, obtained
             using the client credentials grant type.
           * TLS_CERT: Every HTTP request to the notification endpoint is sent
             over a mutually authenticated TLS session, i.e. not only the
             server is authenticated, but also the client is authenticated
             during the TLS tunnel setup.
         type: array
         items: 
           type: string
           enum:
             - BASIC
             - OAUTH2_CLIENT_CREDENTIALS
             - TLS_CERT
       paramsBasic:
         description: >
           Parameters for authentication/authorization using BASIC.
           Shall be present if authType is "BASIC" and the contained
           information has not been provisioned out of band.
           Shall be absent otherwise.
         type: object
         properties:
           userName:
             description: >
               Username to be used in HTTP Basic authentication. Shall be
               present if it has not been provisioned out of band.
             type: string
           password:
             description: >
               Password to be used in HTTP Basic authentication. Shall be
               present if it has not been provisioned out of band.
             type: string
       paramsOauth2ClientCredentials:
         description: >
           Parameters for authentication/authorization using
           OAUTH2_CLIENT_CREDENTIALS.
           Shall be present if authType is "OAUTH2_CLIENT_CREDENTIALS" and the
           contained information has not been provisioned out of band.
           Shall be absent otherwise.
         type: object
         properties:
           clientId:
             description: >
               Client identifier to be used in the access token request of the
               OAuth 2.0 client credentials grant type. 
               Shall be present if it has not been provisioned out of band.
               The clientId and clientPassword passed in a subscription shall
               not be the same as the clientId and clientPassword that are used
               to obtain authorization for API requests. Client credentials may
               differ between subscriptions. The value of clientPassword should
               be generated by a random process.
             type: string
           clientPassword:
             description: >
               Client password to be used in the access token request of the
               OAuth 2.0 client credentials grant type. 
               Shall be present if it has not been provisioned out of band.
               The clientId and clientPassword passed in a subscription shall
               not be the same as the clientId and clientPassword that are used
               to obtain authorization for API requests. Client credentials may
               differ between subscriptions. The value of clientPassword should
               be generated by a random process.
             type: string
           tokenEndpoint:
             description: >
               The token endpoint from which the access token can be obtained.
               Shall be present if it has not been provisioned out of band.
             $ref: "#/definitions/Uri"